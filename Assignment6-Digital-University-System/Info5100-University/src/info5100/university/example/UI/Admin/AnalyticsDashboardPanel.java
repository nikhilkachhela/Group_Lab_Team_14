/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UI.Admin;
import info5100.university.example.AccessControl.*;
import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.*;
import info5100.university.example.Department.Department;
import info5100.university.example.Finance.*;
import info5100.university.example.Persona.StudentProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.text.NumberFormat;
import java.util.ArrayList;
/**
 *
 * @author Sandeep Patil
 */
public class AnalyticsDashboardPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalyticsDashboardPanel
     */
    private Department department;
private UserDirectory userDirectory;
private FinanceManager financeManager;
private JPanel cardPanel;

public AnalyticsDashboardPanel(Department dept, UserDirectory userDir,
                              FinanceManager finMgr, JPanel cardPanel) {
    this.department = dept;
    this.userDirectory = userDir;
    this.financeManager = finMgr;
    this.cardPanel = cardPanel;
    initComponents();
    loadAnalytics();
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEnrollment = new javax.swing.JTable();
        lblFinanceTitle = new javax.swing.JLabel();
        lblTotalRevenue = new javax.swing.JLabel();
        lblOutstanding = new javax.swing.JLabel();
        lblStudentsPaid = new javax.swing.JLabel();

        jLabel1.setText("University Analytics Dashboard");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh Data");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel2.setText("Active Users by Role");

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Role", "Count"
            }
        ));
        jScrollPane1.setViewportView(tblUsers);

        jLabel3.setText("Courses by Semester");

        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Semester", "Total Courses", "Total Seats", "Enrolled Students"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCourses);

        jLabel4.setText("Course Enrollment Details");

        tblEnrollment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Course Number", "Course Name", "Faculty", "Enrolled", "Capacity", "Revenue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblEnrollment);

        lblFinanceTitle.setText("Financial Summary");

        lblTotalRevenue.setText("Total Revenue: $0.00");

        lblOutstanding.setText("Outstanding Balance: $0.00");

        lblStudentsPaid.setText("Students Paid: 0 / 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(33, 33, 33)
                .addComponent(btnRefresh)
                .addGap(159, 159, 159))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStudentsPaid)
                    .addComponent(lblOutstanding)
                    .addComponent(lblTotalRevenue)
                    .addComponent(lblFinanceTitle)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addContainerGap(667, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBack)
                        .addComponent(btnRefresh))
                    .addComponent(jLabel1))
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblFinanceTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalRevenue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblOutstanding)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStudentsPaid)
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        loadAnalytics();
    javax.swing.JOptionPane.showMessageDialog(this,
        "Analytics data refreshed!",
        "Refresh Complete",
        javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
          cardPanel.remove(this);
    ((java.awt.CardLayout) cardPanel.getLayout()).previous(cardPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void loadAnalytics() {
    loadUserStatistics();
    loadCourseStatistics();
    loadEnrollmentDetails();
    loadFinancialSummary();
}
    
 private void loadUserStatistics() {
    DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
    model.setRowCount(0); // Clear existing rows
    
    // Get counts for each role
    int adminCount = userDirectory.getCountByRole(Role.ADMIN);
    int facultyCount = userDirectory.getCountByRole(Role.FACULTY);
    int studentCount = userDirectory.getCountByRole(Role.STUDENT);
    int registrarCount = userDirectory.getCountByRole(Role.REGISTRAR);
    
    // Add rows
    model.addRow(new Object[]{"Administrators", adminCount});
    model.addRow(new Object[]{"Faculty Members", facultyCount});
    model.addRow(new Object[]{"Students", studentCount});
    model.addRow(new Object[]{"Registrars", registrarCount});
    
    // Total
    int total = adminCount + facultyCount + studentCount + registrarCount;
    model.addRow(new Object[]{"TOTAL ACTIVE USERS", total});
}
 
 private void loadCourseStatistics() {
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    model.setRowCount(0);
    
    // Get Fall2024 schedule
    CourseSchedule fall2024 = department.getCourseSchedule("Fall2024");
    
    if (fall2024 != null) {
        ArrayList<CourseOffer> offers = fall2024.getSchedule(); // FIXED
        int totalSeats = 0;
        int enrolledCount = 0;
        
        for (CourseOffer offer : offers) {
            totalSeats += offer.getSeatList().size(); // FIXED
            for (Seat seat : offer.getSeatList()) { // FIXED
                if (seat.isOccupied()) {
                    enrolledCount++;
                }
            }
        }
        
        model.addRow(new Object[]{
            "Fall 2024",
            offers.size(),
            totalSeats,
            enrolledCount
        });
    }
}
 
 private void loadEnrollmentDetails() {
    DefaultTableModel model = (DefaultTableModel) tblEnrollment.getModel();
    model.setRowCount(0);
    
    CourseSchedule fall2024 = department.getCourseSchedule("Fall2024");
    
    if (fall2024 != null) {
        for (CourseOffer offer : fall2024.getSchedule()) { // FIXED
            Course course = offer.getSubjectCourse();
            
            // Count enrolled students
            int enrolled = 0;
            int capacity = offer.getSeatList().size(); // FIXED
            
            for (Seat seat : offer.getSeatList()) { // FIXED
                if (seat.isOccupied()) {
                    enrolled++;
                }
            }
            
            // Calculate revenue for this course
            double courseRevenue = enrolled * course.getCoursePrice();
            
            // Get faculty name
            String facultyName = "TBA";
            if (offer.getFacultyProfile() != null) {
                facultyName = "Faculty";
            }
            
            model.addRow(new Object[]{
                course.getCOurseNumber(),
                course.getCourseName(),
                facultyName,
                enrolled,
                capacity,
                formatCurrency(courseRevenue)
            });
        }
    }
}
 
 private void loadFinancialSummary() {
    double totalRevenue = financeManager.getTotalRevenue();
    double totalOutstanding = financeManager.getTotalOutstanding();
    
    // Count students who paid
    int totalStudents = 0;
    int paidStudents = 0;
    
    ArrayList<StudentProfile> students = department.getStudentDirectory().getStudentList(); // FIXED
    
    for (StudentProfile student : students) {
        totalStudents++;
        if (financeManager.hasStudentPaidTuition(student)) {
            paidStudents++;
        }
    }
    
    // Update labels
    lblTotalRevenue.setText("Total Revenue: " + formatCurrency(totalRevenue));
    lblOutstanding.setText("Outstanding Balance: " + formatCurrency(totalOutstanding));
    lblStudentsPaid.setText("Students Paid: " + paidStudents + " / " + totalStudents);
}
 
 private String formatCurrency(double amount) {
    NumberFormat formatter = NumberFormat.getCurrencyInstance();
    return formatter.format(amount);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFinanceTitle;
    private javax.swing.JLabel lblOutstanding;
    private javax.swing.JLabel lblStudentsPaid;
    private javax.swing.JLabel lblTotalRevenue;
    private javax.swing.JTable tblCourses;
    private javax.swing.JTable tblEnrollment;
    private javax.swing.JTable tblUsers;
    // End of variables declaration//GEN-END:variables
}
